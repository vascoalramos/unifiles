extends ../layout

block content


  .container-fluid.p-5(style="margin-top: 5px;")
    h2.title-admin-table Dashboard

    .row.mt-5
      .col-sm
        .card.shadow
          .card-body.text-center
            h5.card-title Active Users
            h3.card-subtitle.mt-4.mb-2#totalActiveUsers(style="font-weight: 900")
    .row.mt-5
      .col-sm
        .card.shadow
          .card-body
            h5.card-title.text-center Top 10 Tags (Most Used)
            .container.card-text.mt-4.mb-2.px-5
              ul.top10#top10Tags(style="list-style: none;")
      .col-sm
        .card.shadow
          .card-body
            h5.card-title.text-center Top 10 Users (Most Resources)
            .container.card-text.mt-4.mb-2.px-5
              ul.top10#top10Users(style="list-style: none;")
    
    .row.mt-5
      .col-sm
        .card.shadow
          .card-body.text-center
            .div(style="width: 100%")
              h5.card-title.text-center(style="display: inline-block") Number of Resources Over Time
              .btn-group.float-right
                button.btn.btn-sm.btn-secondary.dropdown-toggle.my-dropdown-toggle(type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="background:#343a40;border:0;box-shadow: none!important") Group by
                .dropdown-menu.dropdown-menu-right
                  button.dropdown-item(onclick="displayGraph('hour')") By Hour
                  button.dropdown-item(onclick="displayGraph('day')") By Day
                  button.dropdown-item(onclick="displayGraph('month')") By Month
            
            .float-none.mt-4
            canvas#myChart(style="width: 100%; height: 600px")
        

  script(type="text/javascript").
    let myChart = null;

    function clearChart() {
        if (myChart !== null) {
            myChart.destroy();
        }
    }

    $(document).ready(function () {
      fillTotalActiveUsers();
      fillTop10Tags();
      fillTop10Users();
      displayGraph("hour");
    })

    function fillTotalActiveUsers() {
      $.ajax({
        url: `${host}/api/stats/total/activeUsers`,
        type: "GET",
        dataType: "json",
        success: function(total) {
          $("#totalActiveUsers").text(total);
        },
        error: function (errors) {
          console.log(errors)
        }
      });
    }

    function fillTop10Tags() {
      $.ajax({
        url: `${host}/api/stats/top/tags`,
        type: "GET",
        dataType: "json",
        success: function(topTags) {
          let maxValue = topTags[0].total;

          topTags.forEach((tag) => {
            $("#top10Tags").append(`
              <li>
                <div class="row h-100">
                  <div class="col-3 my-auto">
                    <a href="/?tag=${tag._id}" target="_blank" style="color: black; font-weight: bold"><i>#${tag._id}</i></a>
                  </div>
                  <div class="col-9 my-auto">
                    <div class="progress" style="height: 0.5rem; width: ${((tag.total / maxValue) * 100) - 15}%">
                      <div class="progress-bar bg-dark" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
                    </div>
                    <div style="margin-left: ${((tag.total / maxValue) * 100) - 14}%; position: absolute; margin-top: -1.1em;">${tag.total}</div>
                  </div>
                <div>
              </li>
            `);
          });
        },
        error: function (errors) {
          console.log(errors)
        }
      });
    }

    function fillTop10Users() {
      $.ajax({
        url: `${host}/api/stats/top/users`,
        type: "GET",
        dataType: "json",
        success: function(topUsers) {
          let maxValue = topUsers[0].total;

          topUsers.forEach((user) => {
            $("#top10Users").append(`
              <li>
                <div class="row h-100">
                  <div class="col-4 my-auto">
                    <span style="color: black; font-weight: bold">${user.user.name}</span>
                  </div>
                  <div class="col-8 my-auto">
                    <div class="progress" style="height: 0.5rem; width: ${((user.total / maxValue) * 100) - 15}%">
                      <div class="progress-bar bg-dark" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
                    </div>
                    <div style="margin-left: ${((user.total / maxValue) * 100) - 14}%; position: absolute; margin-top: -1.1em;">${user.total}</div>
                  </div>
                <div>
              </li>
            `);
          });
        },
        error: function (errors) {
          console.log(errors)
        }
      });
    }

    function displayGraph(groupKey) {
      clearChart();
      let timeFormat = {};

      if (groupKey === "hour") {
        timeFormat = {
          format: "HH:mm",
          displayFormats: {
            hour: 'HH:mm'
          }
        };
      }

      timeFormat.unit = `${groupKey}`;

      $.ajax({
        url: `${host}/api/stats/total/resources?groupBy=${groupKey}`,
        type: "GET",
        dataType: "json",
        success: function(data) {
          console.log(data)
            console.log(data.map(e => {

                      let date = Object.values(e._id);
                      date[1] = date[1]--;
                      return groupKey === "hour" ? new Date(... date).getHours().toString() + ":00" : new Date(... date);
                      }))
            let myChart = new Chart(document.getElementById('myChart'), {
                type: 'line',
                hover: true,
                data: {
                    labels: data.map(e => {
                      let date = Object.values(e._id);
                      date[1] = date[1]--;
                      return groupKey === "hour" ? new Date(... date).getHours().toString() + ":00" : new Date(... date);
                      }),
                    datasets: [{
                        data: data.map(e => {
                          let date = Object.values(e._id);
                          date[1] = date[1] - 1;
                          return {y: e.total, t: groupKey === "hour" ? new Date(... date).getHours().toString() + ":00" : new Date(... date)}
                          }),
                        backgroundColor: "transparent",
                        borderColor: "#FF4136",
                        borderWidth: 1
                    }]
                },
                options: {
                    legend: {
                        display: false,
                    },
                    responsive: false,
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "Number of Resources"
                            }
                        }],
                        xAxes: [{
                            type: 'time',
                            time: timeFormat,
                            scaleLabel: {
                                display: true,
                                labelString: `Time (${groupKey}s)`
                            }
                        }]
                    }
                }
            });
        },
        error: function (errors) {
          console.log(errors)
        }
      });
    }
      